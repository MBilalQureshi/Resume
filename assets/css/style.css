@import url('https://fonts.googleapis.com/css?family=Roboto:100,200,300,400,500,600,700|Exo:100,200,300,400,500,600,700');

/* ---------------------------------------Colors */
.bg-color-name-title{
    background-color: #676767;
}

.ui-menu-color-home{
    background-color: #e67e22;
}

.ui-menu-color-resume{
    background-color: #9b59b6;
}

.ui-menu-color-contact{
    background-color: #3498db;
}

.ui-menu-color-download{
    background-color: #525252;
}

.bg-color-three-reasons{
    background-color: #fff;
}

.bg-color-personal-info{
    background-color: #f4f4f4;
}
/* --------------------------------- Tests */


/* .row{
    border:2px solid green;
}*/
/* .row .col{
    border:2px solid red;
}  */

/* ---------------------------------------Special paddings/margins/texts */

/* set the margins for our headers to 0, so we don't get any nasty surprises later on. */
h1,
h2,
h3,
h4{
    margin: 0;
}

.uppercase{
    text-transform: uppercase;
}

.general-sub{
    font-family: "Exo", sans-serif;
    font-weight: 300;
    color: #fafafa
}

.inline-block{
    display: inline-block;
}

.row-table{
    /* Our display is going to be just set to table.
    By doing this, we can then specify its child columns as table cells, as we mentioned before, 
    which as we've said, ensures that the columns will remain equal height, regardless of their content. */
    display: table;
}

.section-column{
    display: table-cell;
    padding: 0 30px 30px;
    /* And we're going to set our float to none.
    Older versions of Bootstrap used to use floats.
    We're just setting it to none here, just to make sure that our column doesn't end up with any unsightly breaks. */
    float: none;
}

.section-heading{
    font-family: "Exo", sans-serif;
    font-weight: 300;
    margin-top: 25px;
    margin-bottom: 40px;
}

/* -------------------------------Heading */

header{
    margin: 0;
}

.heading{
    margin-left: 50px;
}

.logo{
    background: url(../images/rosie.jpg);
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
    min-height: 360px;
    /* Add animation */
    transition: all .5s ease-in-out;
    -moz-transition: all .5s ease-in-out;
    -webkit-transition: all .5s ease-in-out;
}

.name{
    font-family: "Exo", sans-serif;
    font-weight: 100;
    font-size: 46px;
    margin-top: 50px;
    color: #fff
}

.title{
    font-family: "Roboto", sans-serif;
    font-weight: 200;
    font-size: 28px;
    margin-top: 20px;
    margin-bottom: 90px;
    color: #fff
}

.list-inline-item:not(:last-child) {
    margin: 0;
}

/* To allign nav items with image from bottom */
#nav{
    margin: 0;
}

/* HACK: We used the menucontainer class to close the gaps between the nav elements, set font-size to 0, and to make written items visible again target #nav li { font-size:14px and padding to 0} */
.menucontainer{
    font-size: 0;
}

#nav li {
    font-size:14px;
    padding: 0;
}
/* HACK END */

.menuitem{
    /* Remember that our profile image is 360px in height.
    So 120 is a third of that overall height, which provides a kind of visual balance. */
    height: 120px;
    text-align: center;
    padding: 0;
}

.menuitem a{
    width: 100%;
    text-decoration: none;
    color:#fff;
    /* height matches our parent menuitem */
    height: 120px;
}

.menuitem a i{
    padding-top: 22px;
    display: block;
    color: #fafafa;
    font-size: 26px;
}

.menuitem span {
    display: block;
    width: 100%;
    padding-top: 5px;
    text-align: center;
    text-transform: uppercase;
    font-size: 14px;
    font-weight: 300;
    letter-spacing:2px;
}

/* ---------------------------------------Hover.css */

.hvr-sweep-to-bottom:before{
    /* We'll set the transparency to 0.2, which will give a nice gray transparency. */
    background-color: rgba(0,0,0,0.2);
    /* Again, I'm going to set the height to 120px so that it fills our entire menu item. */
    height: 120px;
}

/* -------------------------------footer */
footer{
    background-color: #525252;
    color: #fafafa;
    min-height: 120px;
}

.cv-pdf i{
    font-size: 18px;
    color: #fafafa;
    text-align: center;
    padding-left: 5px;
    /* we also want to do is when we hover over this is have our icon change to a dark, rich orange color.
    Now, I'm going to put the transitions here, rather than in the hover pseudo-element.
    The reason for this is that you always want to put the transitions in the parent element, rather than the hovered.
    This means that the transition will take effect when the mouse hovers over and when the mouse leaves. */
    transition: all .35s ease-in-out;
    -moz-transition: all .35s ease-in-out;
    -webkit-transition: all .35s ease-in-out;
    -o-transition: all .35s ease-in-out;
}

/* Now, we want above mentioned transition to take effect */
.cv-pdf i:hover{
    color: #e84610;
}

.social-links{
    padding-bottom: 15px;
}

.social-links li a i{
    width: 32px;
    height: 32px;
    padding: 12px 0;
    border-radius: 50%;
    font-size: 13px;
    line-height: 7px;
    text-align: center;
    color: #fafafa;
    background: #8f8f8f;
    transition: all 0.35s ease-in-out;
    -moz-transition: all 0.35s ease-in-out;
    -webkit-transition: all 0.35s ease-in-out;
    -o-transition: all 0.35s ease-in-out
}

.social-links li a i:hover{
    color: #e84610;
}

#footer-details{
    padding: 20px;
}

/* -------------------------------Three reasons */
.three-reasons-icon{
    font-size: 26px;
    color:#e67e22
}
.three-reasons-heading{
    margin-bottom: 15px;
}

/* -------------------------------Personal info */

.personal-info-item{
    margin-bottom: 20px;
    display: block;
    /*  set the clear to both so that no other items can appear at either side of it in case, we were using floats. */
    clear: both;
}

.personal-info-item .key,
.personal-info-item .value{
    padding-right: 8px;
    /* Remember that a <div> is a block level element by default, which means it starts and ends with a new line and occupies the maximum horizontal space available.
    An inline block on the other hand allows us to put two divs side-by-side, and that's what we want to do here. */
    display: inline-block;
}

.personal-info-item .key p,
.personal-info-item .value p{
    margin: 0;   
}

.personal-info-item .key{
    /* The first thing I want to do is give the width of the key as 30% because we're going to set the width of the value to 60%, which gives us an overall of 90%.
    Then we're going to put some margins and padding on either side of the combined percentages of both key and value, 
    which will give us some breathing space and make everything look nice. */
    width: 30%;
    margin-right: 21px;
    padding-top: 2px;
    /* set the vertical-align to top so that it hugs the top of the <div> as much as possible. */
    vertical-align: top;
}

.personal-info-item .key p{
    font-weight: 700;

}

.personal-info-item .value{
    /* The key occupies 30% of the width.
    Our value, as I said a moment ago, is going to occupy 60%. */
    width: 60%;
    /* I'm setting the position to relative, too, because I want it to be relative to its predecessor. */
    /* comment, above text didnt made sense */
    position: relative;
}